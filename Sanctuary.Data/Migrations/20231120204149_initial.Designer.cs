// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sanctuary.Data;

#nullable disable

namespace Sanctuary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231120204149_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.AbsenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("AbsenceType");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("TimeOfAppointmentFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfAppointmentTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalizedPetCagedNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicName")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.ClinicServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SpecializedDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ClinicServices");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.ClinicStaffLeave", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AbsenceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Days")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Guid");

                    b.HasIndex("AbsenceTypeId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ReplacedById");

                    b.HasIndex("RequestedById");

                    b.ToTable("ClinicStaffLeave");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.HospitalizedPets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfSubmission")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PetId");

                    b.ToTable("HospitalizedPets");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("MedicalLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalLogId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PetHotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HotelPlaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId")
                        .IsUnique();

                    b.ToTable("PetHotel");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PetHotelGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PetHotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TimeOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfLeave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PetHotelId");

                    b.HasIndex("PetId");

                    b.ToTable("PetHotelGuest");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PromoCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.Configurable.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Sanctuary.Data.Models.Configurable.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.LocationTables.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PostalCodeInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("lat")
                        .HasColumnType("float");

                    b.Property<double?>("lon")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId")
                        .IsUnique()
                        .HasFilter("[ClinicId] IS NOT NULL");

                    b.HasIndex("PostalCodeInfoId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.LocationTables.PostalCodesCoordinates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lng")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Allergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.MedicalLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTimeOfVisitation")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonOfVisitation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("MedicalLogs");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("ClientUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EyeColor")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FurColor")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Microchip")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(1)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("BreedId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PicturesTables.ImageStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier ROWGUIDCOL UNIQUE");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProfilePicture")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("VARBINARY(MAX) FILESTREAM");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.BaseApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClientUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ClientUsers");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClinicStaffUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CabinetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalPaidDaysLeave")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ClinicStaffUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.Configurable.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.Configurable.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Appointment", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.UserTables.ClientUser", "Client")
                        .WithMany("AppointmentList")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.UserTables.ClinicStaffUser", "Doctor")
                        .WithMany("Schedule")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.ClinicServices", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Appointment", null)
                        .WithMany("Services")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("Services")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Invoice", null)
                        .WithMany("ServicesUsed")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.ClinicStaffLeave", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.AbsenceType", "AbsenceType")
                        .WithMany()
                        .HasForeignKey("AbsenceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", null)
                        .WithMany("ClinicStaffLeaves")
                        .HasForeignKey("ClinicId");

                    b.HasOne("Sanctuary.Data.Models.UserTables.ClinicStaffUser", "ReplacedBy")
                        .WithMany("ClinicStaffLeaveReplace")
                        .HasForeignKey("ReplacedById");

                    b.HasOne("Sanctuary.Data.Models.UserTables.ClinicStaffUser", "RequestedBy")
                        .WithMany("ClinicStaffLeaveRequest")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AbsenceType");

                    b.Navigation("ReplacedBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.HospitalizedPets", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("HospitalizedPets")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.PetTables.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId");

                    b.Navigation("Clinic");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Invoice", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.UserTables.ClientUser", "Receiver")
                        .WithMany("Invoices")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Sender")
                        .WithMany("Invoices")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Medicine", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.PetTables.MedicalLog", null)
                        .WithMany("MedicineList")
                        .HasForeignKey("MedicalLogId");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PetHotel", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithOne("Hotel")
                        .HasForeignKey("Sanctuary.Data.Models.ClinicTables.PetHotel", "ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PetHotelGuest", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.PetHotel", "PetHotel")
                        .WithMany("Pet")
                        .HasForeignKey("PetHotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.PetTables.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("PetHotel");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PromoCodes", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("PromoCodes")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.LocationTables.Address", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithOne("Address")
                        .HasForeignKey("Sanctuary.Data.Models.LocationTables.Address", "ClinicId");

                    b.HasOne("Sanctuary.Data.Models.LocationTables.PostalCodesCoordinates", "PostalCodeInfo")
                        .WithMany()
                        .HasForeignKey("PostalCodeInfoId");

                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", "BaseUser")
                        .WithOne("Address")
                        .HasForeignKey("Sanctuary.Data.Models.LocationTables.Address", "UserId");

                    b.Navigation("BaseUser");

                    b.Navigation("Clinic");

                    b.Navigation("PostalCodeInfo");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Allergies", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.PetTables.Pet", "Pet")
                        .WithMany("Allergies")
                        .HasForeignKey("PetId");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.MedicalLog", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.PetTables.Pet", "Pet")
                        .WithMany("MedicalLogs")
                        .HasForeignKey("PetId");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Pet", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Appointment", null)
                        .WithMany("Pets")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Sanctuary.Data.Models.PetTables.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.UserTables.ClientUser", "ClientUser")
                        .WithMany("PetOwnerships")
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PicturesTables.ImageStorage", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("RelatedPictures")
                        .HasForeignKey("ClinicId");

                    b.HasOne("Sanctuary.Data.Models.PetTables.Pet", "Pet")
                        .WithMany("RelatedPictures")
                        .HasForeignKey("PetId");

                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", "User")
                        .WithMany("RelatedPictures")
                        .HasForeignKey("UserId");

                    b.Navigation("Clinic");

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClientUser", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("Users")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", "BaseUser")
                        .WithOne("Client")
                        .HasForeignKey("Sanctuary.Data.Models.UserTables.ClientUser", "UserId");

                    b.Navigation("BaseUser");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClinicStaffUser", b =>
                {
                    b.HasOne("Sanctuary.Data.Models.ClinicTables.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sanctuary.Data.Models.UserTables.BaseApplicationUser", "BaseUser")
                        .WithOne("Veterinary")
                        .HasForeignKey("Sanctuary.Data.Models.UserTables.ClinicStaffUser", "UserId");

                    b.Navigation("BaseUser");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Appointment", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Clinic", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("ClinicStaffLeaves");

                    b.Navigation("Doctors");

                    b.Navigation("HospitalizedPets");

                    b.Navigation("Hotel");

                    b.Navigation("Invoices");

                    b.Navigation("PromoCodes");

                    b.Navigation("RelatedPictures");

                    b.Navigation("Services");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.Invoice", b =>
                {
                    b.Navigation("ServicesUsed");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.ClinicTables.PetHotel", b =>
                {
                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.MedicalLog", b =>
                {
                    b.Navigation("MedicineList");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.PetTables.Pet", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("MedicalLogs");

                    b.Navigation("RelatedPictures");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.BaseApplicationUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Claims");

                    b.Navigation("Client");

                    b.Navigation("Logins");

                    b.Navigation("RelatedPictures");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");

                    b.Navigation("Veterinary");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClientUser", b =>
                {
                    b.Navigation("AppointmentList");

                    b.Navigation("Invoices");

                    b.Navigation("PetOwnerships");
                });

            modelBuilder.Entity("Sanctuary.Data.Models.UserTables.ClinicStaffUser", b =>
                {
                    b.Navigation("ClinicStaffLeaveReplace");

                    b.Navigation("ClinicStaffLeaveRequest");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
